-------------------------------------------------------------------------------
-- Script name:   AVSA_VAR_Logged_Master.hql
-- Created on:    06/11/2015
-- Author:        Melchiorre, Pierpaolo
-- Purpose:       Process to load the dimensions in order to simplify calculation of KPI
-------------------------------------------------------------------------------

delete jar /tmp/jar/AVSA_UDF_Compiled_Code.jar;
add jar /tmp/jar/AVSA_UDF_Compiled_Code.jar;

drop temporary function GetAgeBracket;
create temporary function GetAgeBracket as 'com.accenture.AVSA.hive.UDF.GetAgeBracket';

-- creation of staging table for curation entity
CREATE EXTERNAL TABLE IF NOT EXISTS var_logged_master (
  date STRING,
  user_id STRING,
  birth_date STRING,
  gender STRING,
  age_bracket STRING,
  country STRING,
  state STRING,
  province STRING,
  city STRING,
  zip_code STRING,
  registration_method STRING,
  referral_source STRING,
  registration_trigger STRING,
  registration_date STRING,
  most_used_platform STRING,
  first_access_date STRING,
  first_view_date STRING
)
ROW FORMAT
DELIMITED FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/VAR_LOGGED/var_logged_master';

-- Process to load the dimensions in order to simplify calculation of KPI
INSERT OVERWRITE TABLE var_logged_master
SELECT (date_sub(from_unixtime(unix_timestamp(), 'yyyy-MM-dd' ), 1) )     AS DATE,
       t1.userid                                                         AS USER_ID,
       t1.birth_date                                                     AS BIRTH_DATE,
       t1.gender                                                         AS GENDER,
       GetAgeBracket(t1.birth_date)                                      AS AGE_BRACKET,
       t1.country                                                        AS COUNTRY,
       t1.state                                                          AS STATE,
       t1.province                                                       AS PROVINCE,
       t1.city                                                           AS CITY,
       t1.zip_code                                                       AS ZIP_CODE,
       t2.registrationmethod                                             AS REGISTRATION_METHOD,
       t2.referralsource                                                 AS REFERRAL_SOURCE,
       t2.registrationtrigger                                            AS REGISTRATION_TRIGGER,
       t2.join_date                                                      AS REGISTRATION_DATE,
       b.channel                                                         AS MOST_USED_PLATFORM,
       t3.login_date                                                     AS FIRST_ACCESS_DATE,
       t4.watching_date                                                  AS FIRST_VIEW_DATE
FROM   target_profiling t1
       LEFT OUTER JOIN target_customer_base_join t2 
                    ON ( t1.userid = t2.userid )                  
       LEFT OUTER JOIN target_customer_base_login t3
                    ON ( t1.userid = t3.userid ) 
       LEFT OUTER JOIN target_customer_base_watching t4
                    ON ( t1.userid = t4.userid )
       LEFT OUTER JOIN (       
                        SELECT S.userid, S.channel 
                         FROM (
                            SELECT userid as userid,
                                   channel as channel,
                                   num,
                                   rank() over (partition by userid order by num desc,channel) as r
                            FROM (
                                SELECT   t1.userid as userid ,t4.channel as channel, count(t4.channel) as num 
                                FROM target_profiling t1, target_user_action t4
                                WHERE  t1.userid = t4.userid
                                  AND t4.dt_reference >= DATE_SUB(FROM_UNIXTIME(UNIX_TIMESTAMP(),'yyyy-MM-dd') , 90) 
								  AND t4.dt_reference < FROM_UNIXTIME(UNIX_TIMESTAMP(),'yyyy-MM-dd')
                                GROUP BY t1.userid ,t4.channel
                                )a                             
                             ) S
                            WHERE S.r=1
                        ) b             
                    ON ( t1.userid = b.userid );
  
