-- -----------------------------------------------------------------------------
-- Script name:   AVSA_AGGREGATE_Accesses_Weekly.hql
-- Created on:    09/11/2015
-- Author:        Nayak, Vinayak
-- Purpose:       Process to calculate the Accesses Aggregate (Weekly) table
-- -----------------------------------------------------------------------------

delete jar ${hivevar:PATH_SH}/scripts/shells/AVSA_UDF_Compiled_Code.jar;

add jar ${hivevar:PATH_SH}/scripts/shells/AVSA_UDF_Compiled_Code.jar;

drop temporary function Week_c_top;

create temporary function Week_c_top as 'com.accenture.AVSA.hive.UDF.Week_c_top';

-- creating a temporary table to store the 1^ subset of Accesses's Weekly KPIs
CREATE EXTERNAL TABLE IF NOT EXISTS accesses_weekly_01 (
  CONTEXT STRING,
  DATE DATE,
  GEOGRAPHY_ID STRING,
  ACCESS_DISTRIBUTION STRING,
  LOGGED_USERS INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/ACCESSES/accesses_weekly_01';

-------------------------------------------------------------------------------
-- Temporary table name: accesses_weekly_01
-- LOGGED_USERS
-------------------------------------------------------------------------------

INSERT OVERWRITE TABLE accesses_weekly_01
SELECT
  "Weekly Accesses" as CONTEXT,
  x1.DATE as DATE,
  nvl(geography_id, 0) as GEOGRAPHY_ID,
  (CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END ) AS ACCESS_DISTRIBUTION,
   x1.LOGGED_USERS AS LOGGED_USERS
from (
 select
    x5.* 
    from(
        select
         t3.geography_id as GEOGRAPHY_ID,
         x4.*
        from(
            select
             t2.REGIONNAME as REGIONNAME,
             t2.COUNTRY as COUNTRY,
             t2.STATE as STATE,
             x3.*
            from(
                 select
                 t2.weekly_day as DATE,
                 x2.*
                from(
                         select 
                              C.LOGGED_USERS,
                              C.TOT,
                              B.dt_reference as dt_reference,
                              B.userid as userid
                        FROM(
                              select SUM(A.LOGGED_USERS) AS TOT, A.userid, A.LOGGED_USERS
                              FROM(
                                    SELECT t1.userid, COUNT(t1.userid) AS LOGGED_USERS
                                    FROM
                                    target_login t1
                                    where t1.userid != t1.deviceid AND t1.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                                    GROUP BY t1.userid
                                 ) A
                             GROUP BY A.LOGGED_USERS, A.userid
                            )C
                             Left outer join target_login B ON C.userid = B.userid
                    )x2
                               left outer join dim_calendar t2 on x2.dt_reference = t2.day_identifier
                             where x2.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                )x3
            left outer join target_profiling t2
            on t2.userid = x3.userid
            )x4
        left outer join dim_geography t3
        on x4.REGIONNAME = t3.CONTINENT
            AND x4.COUNTRY = t3.STATE
            AND x4.STATE = t3.REGION
        )x5
    )x1
group by x1.DATE, nvl(geography_id, 0), x1.LOGGED_USERS, CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END;
   
-- creating a temporary table to store the 2^ subset of Accesses's Weekly KPIs
CREATE EXTERNAL TABLE IF NOT EXISTS accesses_weekly_02 (
  CONTEXT STRING,
  DATE DATE,
  GEOGRAPHY_ID STRING,
  ACCESS_DISTRIBUTION STRING,
  LOGGED_USERS_MORE_PLATFORMS INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/ACCESSES/accesses_weekly_02';

-- -----------------------------------------------------------------------------
-- Temporary table name: accesses_weekly_02
-- LOGGED_USERS_MORE_PLATFORMS
-- -----------------------------------------------------------------------------

INSERT OVERWRITE TABLE accesses_weekly_02
SELECT
  "Weekly Accesses" as CONTEXT,
  x1.DATE as DATE,
  nvl(geography_id, 0) as GEOGRAPHY_ID,  
  (CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END ) AS ACCESS_DISTRIBUTION,
   x1.LOGGED_USERS_MORE_PLATFORMS AS LOGGED_USERS_MORE_PLATFORMS
from (
 select
    x5.* 
    from(
        select
         t3.geography_id as GEOGRAPHY_ID,
         x4.*
        from(
            select
             t2.REGIONNAME as REGIONNAME,
             t2.COUNTRY as COUNTRY,
             t2.STATE as STATE,
             x3.*
            from(
                 select
                 t2.weekly_day as DATE,
                 x2.*
                from(
                         select 
                              C.LOGGED_USERS_MORE_PLATFORMS,
                              C.TOT,
                              B.dt_reference as dt_reference,
                              B.userid as userid
                        FROM(
                              select SUM(A.LOGGED_USERS_MORE_PLATFORMS) AS TOT, A.userid, A.LOGGED_USERS_MORE_PLATFORMS
                              FROM(
                                    SELECT t1.userid, COUNT(t1.userid) AS LOGGED_USERS_MORE_PLATFORMS
                                    FROM
                                    target_login t1
                                    where t1.userid != t1.deviceid AND t1.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                                    GROUP BY t1.userid, t1.channel
                                    HAVING LOGGED_USERS_MORE_PLATFORMS > 1
                                 ) A
                             GROUP BY A.LOGGED_USERS_MORE_PLATFORMS, A.userid
                            )C 
                             Left outer join target_login B ON C.userid = B.userid
                    )x2
                               left outer join dim_calendar t2 on x2.dt_reference = t2.day_identifier
                             where x2.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                )x3
            left outer join target_profiling t2
            on t2.userid = x3.userid
            )x4
        left outer join dim_geography t3
        on x4.REGIONNAME = t3.CONTINENT
            AND x4.COUNTRY = t3.STATE
            AND x4.STATE = t3.REGION
        )x5
    )x1
group by x1.DATE, nvl(geography_id, 0), x1.LOGGED_USERS_MORE_PLATFORMS, CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END;

-- creating a temporary table to store the 3^ subset of Accesses's Weekly KPIs
CREATE EXTERNAL TABLE IF NOT EXISTS accesses_weekly_03 (
  CONTEXT STRING,
  DATE DATE,
  GEOGRAPHY_ID STRING,
  ACCESS_DISTRIBUTION STRING,
  ANONYMOUS_USERS INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/ACCESSES/accesses_weekly_03';

-- -----------------------------------------------------------------------------
-- Temporary table name: accesses_weekly_03
-- ANONYMOUS_USERS
-- -----------------------------------------------------------------------------

INSERT OVERWRITE TABLE accesses_weekly_03
SELECT
  "Weekly Accesses" as CONTEXT,
  x1.DATE as DATE,
  nvl(geography_id, 0) as GEOGRAPHY_ID,
  (CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END ) AS ACCESS_DISTRIBUTION,
   x1.ANONYMOUS_USERS AS ANONYMOUS_USERS
from (
 select
    x5.* 
    from(
        select
         t3.geography_id as GEOGRAPHY_ID,
         x4.*
        from(
            select
             t2.REGIONNAME as REGIONNAME,
             t2.COUNTRY as COUNTRY,
             t2.STATE as STATE,
             x3.*
            from(
                 select
                 t2.weekly_day as DATE,
                 x2.*
                from(
                         select 
                              C.ANONYMOUS_USERS,
                              C.TOT,
                              B.dt_reference as dt_reference,
                              B.userid as userid
                        FROM(
                              select SUM(A.ANONYMOUS_USERS) AS TOT, A.userid, A.ANONYMOUS_USERS
                              FROM(
                                    SELECT t1.userid, COUNT(t1.userid) AS ANONYMOUS_USERS
                                    FROM
                                    target_login t1
                                    where t1.userid = t1.deviceid AND t1.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                                    GROUP BY t1.userid
                                 ) A
                             GROUP BY A.ANONYMOUS_USERS, A.userid
                            )C 
                             Left outer join target_login B ON C.userid = B.userid
                    )x2
                               left outer join dim_calendar t2 on x2.dt_reference = t2.day_identifier
                             where x2.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                )x3
            left outer join target_profiling t2
            on t2.userid = x3.userid
            )x4
        left outer join dim_geography t3
        on x4.REGIONNAME = t3.CONTINENT
            AND x4.COUNTRY = t3.STATE
            AND x4.STATE = t3.REGION
        )x5
    )x1
group by x1.DATE, nvl(geography_id, 0), x1.ANONYMOUS_USERS, CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END;

 -- creating a temporary table to store the 4^ subset of Accesses's KPIs
CREATE EXTERNAL TABLE IF NOT EXISTS accesses_weekly_04 (
  CONTEXT STRING,
  DATE DATE,
  GEOGRAPHY_ID STRING,
  ACCESS_DISTRIBUTION STRING,
  DEVICES INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/ACCESSES/accesses_weekly_04';

-- -----------------------------------------------------------------------------
-- Temporary table name: accesses_04
-- DEVICES
-- -----------------------------------------------------------------------------

INSERT OVERWRITE TABLE accesses_weekly_04
SELECT
  "Daily Accesses" as CONTEXT,
  x1.DATE as DATE,
  nvl(geography_id, 0) as GEOGRAPHY_ID,
  (CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END ) AS ACCESS_DISTRIBUTION,
   x1.DEVICES AS DEVICES
from (
 select
    x5.* 
    from(
        select
         t3.geography_id as GEOGRAPHY_ID,
         x4.*
        from(
            select
             t2.REGIONNAME as REGIONNAME,
             t2.COUNTRY as COUNTRY,
             t2.STATE as STATE,
             x3.*
            from(
                 select
                 t2.daily_day as DATE,
                 x2.*
                from(
                         select 
                              C.DEVICES,
                              C.TOT,
                              B.dt_reference as dt_reference,
                              B.deviceid as deviceid,
                              B.userid as userid
                        FROM(
                              select count(A.DEVICES) AS TOT, A.deviceid, A.DEVICES
                              FROM(
                                    SELECT t1.deviceid, COUNT(t1.deviceid) AS DEVICES
                                    FROM
                                    target_login t1
                                    where t1.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                                    GROUP BY t1.deviceid
                                 ) A
                             GROUP BY A.DEVICES, A.deviceid
                            )C 
                             Left outer join target_login B ON C.deviceid = B.deviceid
                    )x2
                               left outer join dim_calendar t2 on x2.dt_reference = t2.day_identifier
                             where x2.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                )x3
            left outer join target_profiling t2
            on t2.userid = x3.userid
            )x4
        left outer join dim_geography t3
        on x4.REGIONNAME = t3.CONTINENT
            AND x4.COUNTRY = t3.STATE
            AND x4.STATE = t3.REGION
        )x5
    )x1
group by x1.DATE, nvl(geography_id, 0), x1.DEVICES, CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END;
   
   
-- creating a temporary table to store the 5^ subset of Accesses's KPIs
CREATE EXTERNAL TABLE IF NOT EXISTS accesses_weekly_05 (
  CONTEXT STRING,
  DATE DATE,
  GEOGRAPHY_ID STRING,
  ACCESS_DISTRIBUTION STRING,
  DISTINCT_USERS_DEVICES INT
)
ROW FORMAT DELIMITED 
FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/ACCESSES/accesses_weekly_05';

-- -----------------------------------------------------------------------------
-- Temporary table name: accesses_weekly_05
-- DISTINCT_USERS_DEVICES
-- -----------------------------------------------------------------------------

INSERT OVERWRITE TABLE accesses_weekly_05
SELECT
  "Daily Accesses" as CONTEXT,
  x1.DATE as DATE,
  nvl(geography_id, 0) as GEOGRAPHY_ID,
  (CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END ) AS ACCESS_DISTRIBUTION,
   x1.DISTINCT_USERS_DEVICES AS DISTINCT_USERS_DEVICES
from (
 select
    x5.* 
    from(
        select
         t3.geography_id as GEOGRAPHY_ID,
         x4.*
        from(
            select
             t2.REGIONNAME as REGIONNAME,
             t2.COUNTRY as COUNTRY,
             t2.STATE as STATE,
             x3.*
            from(
                 select
                 t2.daily_day as DATE,
                 x2.*
                from(
                         select 
                              C.DEVICES as DISTINCT_USERS_DEVICES,
                              C.TOT,
                              B.dt_reference as dt_reference,
                              B.deviceid as deviceid,
                              B.userid as userid
                        FROM(
                              select count(A.DEVICES) AS TOT, A.deviceid, A.DEVICES
                              FROM(
                                    SELECT t1.deviceid, COUNT(distinct(t1.deviceid)) AS DEVICES
                                    FROM
                                    target_login t1
                                    where t1.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                                    GROUP BY t1.deviceid
                                 ) A
                             GROUP BY A.DEVICES, A.deviceid
                            )C 
                             Left outer join target_login B ON C.deviceid = B.deviceid
                    )x2
                               left outer join dim_calendar t2 on x2.dt_reference = t2.day_identifier
                             where x2.dt_reference between Week_c_top(from_unixtime(unix_timestamp(),'yyyy-MM-dd')) and (DATE_SUB(from_unixtime(unix_timestamp(),'yyyy-MM-dd'),1))
                )x3
            left outer join target_profiling t2
            on t2.userid = x3.userid
            )x4
        left outer join dim_geography t3
        on x4.REGIONNAME = t3.CONTINENT
            AND x4.COUNTRY = t3.STATE
            AND x4.STATE = t3.REGION
        )x5
    )x1
group by x1.DATE, nvl(geography_id, 0), x1.DISTINCT_USERS_DEVICES, CASE 
   WHEN (x1.TOT) = 1 THEN '1'
   WHEN (x1.TOT) > 1 AND TOT < 6 THEN '2 to 5'
   WHEN (x1.TOT) > 5 AND TOT < 11 THEN '6 to 10'
   WHEN (x1.TOT) > 10 AND TOT < 21 THEN '11 to 20'
   ELSE '>20'
   END;
   
-- --------------------------------------
-- FULL OUTER JOIN OF TEMP TABLES
-- --------------------------------------    

INSERT INTO TABLE agg_accesses
SELECT
  nvl(temp3.context, t4.context)                          as context,
  nvl(temp3.date, t4.date)                                as date,
  ""                                                      as TIMEBAND,
  ""                                                      as PLATFORM,
  nvl(temp3.geography_id, t4.geography_id)                as geography_id,
  ""                                                      as APP_VERSION,
  nvl(temp3.access_distribution, t4.access_distribution)  as access_distribution,
  (if(1 == 2, 1, 0))                                      as LOGGED_ACCESSES,
  (if(1 == 2, 1, 0))                                      as FAILED_LOGINS,
  (if(1 == 2, 1, 0))                                      as LOGGED_ACCESSES_NO_VIDEO,
  nvl(temp3.LOGGED_USERS, 0)                              as LOGGED_USERS,
  nvl(temp3.DEVICES, 0)                                   as DEVICES,
  nvl(t4.DISTINCT_USERS_DEVICES, 0)                       as DISTINCT_USERS_DEVICES,
  (if(1 == 2, 1, 0))                                      as NEW_LOGGED_USERS,
  ""                                                      as MAX_CONCURRENCY_TIME_PEAK,
  (if(1 == 2, 1, 0))                                      as MAX_LOGGED_USERS_CONCURRENCY,
  nvl(temp3.LOGGED_USERS_MORE_PLATFORMS, 0 )              as LOGGED_USERS_MORE_PLATFORMS,
  (if(1 == 2, 1, 0))                                      as LOGGED_APP_STARTUP,
  (if(1 == 2, 1, 0))                                      as ANONYMOUS_ACCESSES,
  (if(1 == 2, 1, 0))                                      as ANONYMOUS_ACCESSES_NO_VIDEO,
  nvl(temp3.anonymous_users, 0)                           as ANONYMOUS_USERS,
  (if(1 == 2, 1, 0))                                      as NEW_ANONYMOUS_USERS,
  (if(1 == 2, 1, 0))                                      as MAX_ANONYMOUS_USERS_CONCURRENCY,
  (if(1 == 2, 1, 0))                                      as ANONYMOUS_APP_STARTUP
FROM(
    SELECT
        nvl(temp2.context, t3.context)                         as context,
        nvl(temp2.date, t3.date)                               as date,
        nvl(temp2.geography_id, t3.geography_id)               as geography_id,
        nvl(temp2.access_distribution, t3.access_distribution) as access_distribution,
        nvl(temp2.logged_users, 0)                             as LOGGED_USERS,
        nvl(temp2.logged_users_more_platforms, 0 )             as LOGGED_USERS_MORE_PLATFORMS,
        nvl(temp2.anonymous_users, 0)                            as ANONYMOUS_USERS,
        nvl(t3.devices, 0)                                        as DEVICES
    FROM(
        SELECT
          nvl(temp1.context0, t2.context)                         as context,
          nvl(temp1.date0, t2.date)                               as date,
          nvl(temp1.geography_id0, t2.geography_id)               as geography_id,
          nvl(temp1.access_distribution0, t2.access_distribution) as access_distribution,
          nvl(temp1.logged_users0, 0)                             as LOGGED_USERS,
          nvl(temp1.logged_users_more_platforms0, 0 )             as LOGGED_USERS_MORE_PLATFORMS,
          nvl(t2.anonymous_users, 0)                              as ANONYMOUS_USERS
        FROM(
            SELECT    nvl(t0.context, t1.context)                                         AS context0, 
                      nvl(t0.date, t1.date)                                               AS date0, 
                      nvl(t0.geography_id, t1.geography_id)                               AS geography_id0, 
                      nvl(t0.access_distribution, t1.access_distribution)                 AS access_distribution0,
                      nvl(t0.logged_users, 0)                                             AS logged_users0,
                      nvl(t1.logged_users_more_platforms, 0)                              AS logged_users_more_platforms0
            FROM   accesses_weekly_01 t0 
            FULL OUTER JOIN accesses_weekly_02 t1 
                ON   ( t0.context = t1.context ) 
                AND  ( t0.date = t1.date ) 
                AND  ( t0.geography_id = t1.geography_id ) 
                AND  ( t0.access_distribution = t1.access_distribution ) 
         )temp1  
         FULL OUTER JOIN accesses_weekly_03 t2
            ON   ( temp1.context0 = t2.context ) 
            AND  ( temp1.date0 = t2.date ) 
            AND  ( temp1.geography_id0 = t2.geography_id ) 
            AND  ( temp1.access_distribution0 = t2.access_distribution )
    )temp2
    FULL OUTER JOIN accesses_weekly_04 t3
        ON   ( temp2.context = t3.context ) 
        AND  ( temp2.date = t3.date ) 
        AND  ( temp2.geography_id = t3.geography_id ) 
        AND  ( temp2.access_distribution = t3.access_distribution )
)temp3
FULL OUTER JOIN accesses_weekly_05 t4
    ON   ( temp3.context = t4.context ) 
    AND  ( temp3.date = t4.date ) 
    AND  ( temp3.geography_id = t4.geography_id )
    AND  ( temp3.access_distribution = t4.access_distribution );
	
