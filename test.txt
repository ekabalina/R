-------------------------------------------------------------------------------
-- Script name:   AVSA_AGGREGATE_Registrations.hql
-- Created on:    28/10/2015
-- Author:        Parvathy Geetha Nair
-- Purpose:       Process to calculate the Registration Aggregate table
-------------------------------------------------------------------------------

-- creation of aggregate registrations table 
CREATE EXTERNAL TABLE IF NOT EXISTS agg_registrations (
  context STRING,
  date STRING,
  gender STRING,
  registration_method STRING,
  registration_trigger STRING,
  refferal_source STRING,
  geography_id STRING,
  registered_users INT,
  total_registration INT
)
ROW FORMAT
DELIMITED FIELDS TERMINATED BY '\073'
LINES TERMINATED BY '\n'
STORED AS TEXTFILE
LOCATION '${hivevar:root_path}/agg/REGISTRATIONS/output';

-- inserting data into table agg_registrations
INSERT OVERWRITE TABLE agg_registrations
SELECT temp2.context,
       temp2.date,
       temp2.gender,
       temp2.registration_method,
       temp2.registration_trigger,
       temp2.referral_source,
       temp2.geography_id,
       temp1.registered_users,
       temp2.total_registrations
FROM   (SELECT "Registrations"                  AS CONTEXT,
               t0.*
        FROM   (SELECT t2.daily_day             AS DATE,
                       t3.gender                AS GENDER,
                       t1.registrationmethod    AS REGISTRATION_METHOD,
                       t1.registrationtrigger   AS REGISTRATION_TRIGGER,
                       t1.referralsource        AS REFERRAL_SOURCE,
                       nvl(t4.geography_id, 0)  AS GEOGRAPHY_ID,
                       count(t1.uniquecontract) AS REGISTERED_USERS
                FROM   target_join t1
                       JOIN dim_calender t2
                         ON ( t1.dt_reference = t2.day_identifier )
                       JOIN target_profiling t3
                         ON ( t1.uniquecontract = t3.userid )
                       JOIN dim_geography t4
                         ON ( t3.regionname = t4.continent )
                            AND ( t3.country = t4.state )
                            AND ( t3.state = t4.region )
                WHERE  t1.dt_reference = ( date_sub(from_unixtime(unix_timestamp(), 'yyyy-MM-dd'), 1) )
                GROUP  BY t2.daily_day,
                          t3.gender,
                          t1.registrationmethod,
                          t1.registrationtrigger,
                          t1.referralsource,
                          Nvl(t4.geography_id, 0)) t0) temp1
       FULL OUTER JOIN (SELECT "Registrations"                                                    AS CONTEXT,
                               t0.*
                        FROM   (SELECT date_sub(from_unixtime(unix_timestamp(), 'yyyy-MM-dd'), 1) AS DATE,
                                       t3.gender                                                  AS GENDER,
                                       t1.registrationmethod                                      AS REGISTRATION_METHOD,
                                       t1.registrationtrigger                                     AS REGISTRATION_TRIGGER,
                                       t1.referralsource                                          AS REFERRAL_SOURCE,
                                       nvl(t4.geography_id, 0)                                    AS GEOGRAPHY_ID,
                                       count(z.userid)                                            AS TOTAL_REGISTRATIONS
                                FROM   target_customer_base_join z
                                       LEFT OUTER JOIN target_join t1
                                                    ON ( z.userid = t1.uniquecontract )
                                       JOIN target_profiling t3
                                         ON ( z.userid = t3.userid )
                                       JOIN dim_geography t4
                                         ON ( t3.regionname = t4.continent )
                                            AND ( t3.country = t4.state )
                                            AND ( t3.state = t4.region )
                                GROUP  BY date_sub(from_unixtime(unix_timestamp(), 'yyyy-MM-dd'), 1),
                                          t3.gender,
                                          t1.registrationmethod,
                                          t1.registrationtrigger,
                                          t1.referralsource,
                                          Nvl(t4.geography_id, 0)) t0) temp2
                    ON ( temp1.date = temp2.date )
                       AND ( temp1.gender = temp2.gender )
                       AND ( temp1.registration_method = temp2.registration_method )
                       AND ( temp1.registration_trigger = temp2.registration_trigger )
                       AND ( temp1.referral_source = temp2.referral_source )
                       AND ( temp1.geography_id = temp2.geography_id );
