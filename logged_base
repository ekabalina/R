---
-- table structure
---
CREATE EXTERNAL TABLE IF NOT EXISTS var_anonymous_base(
	userid	string,
	appversion	string,
	platform	string,
	accesses	int,
	playback_duration	decimal(15,4),
	views	int,
	channel_name	string,
	rank_channel	int,
	categoryname	string,
	pageviews bigint
)
PARTITIONED BY (partition_date string)
LOCATION '${hiveconf:ROOTPATH}/processed/AVA/var_anonymous_base';


---
--required to collect watched categories and channels for F_8, F_9, G_8, G_9, F_25, F_26,.. KPIs
---
INSERT INTO TABLE var_anonymous_base PARTITION
	(
		partition_date = '${hiveconf:ENDDATE}'
	)

SELECT
	userid,
	appversion,
	platform,
	accesses,
	playback_duration,
	SUM(views)                                                                             AS views,
	collect_set(channel_name)[0]                                                           AS channel_name,
	RANK() OVER (PARTITION BY userid,appversion, platform ORDER BY playback_duration DESC) AS rank_channel,
	collect_set(categoryname)[0]                                                           AS categoryname,
	SUM(pageviews)                                                                         AS pageviews
--	'${hiveconf:ENDDATE}' as partition_date

FROM
	(SELECT
		accesses.userid,
		accesses.appversion,
		accesses.platform,

		SUM(pageviews)          AS pageviews,
		SUM(DISTINCT accesses)  AS accesses,
		if(channel_name is not null, sum(playback_duration)+0.001, sum(playback_duration))  as playback_duration,
		SUM(views)              AS views,
		channel_name,
		categoryname
	FROM
		(SELECT
			userid,
			appversion,
			platform,
			COUNT(DISTINCT sessionid) AS accesses,
			SUM(if(eventtype = 'PAGEVIEW',1,0)) AS pageviews
		FROM user_action
		WHERE partition_date='${hiveconf:ENDDATE}'
		AND customerid      = 'GUEST'
		GROUP BY
			userid,
			appversion,
			platform
		) AS accesses
	LEFT OUTER JOIN
		(SELECT userid,
			appversion,
			platform,
			contentid,
			COUNT(contentid)    AS views,
			SUM(consumption)/60 AS playback_duration
		FROM watching
		WHERE partition_date='${hiveconf:ENDDATE}'
		AND customerid      = 'GUEST'
		GROUP BY userid,
			appversion,
			platform,
			contentid
		) AS watching
		ON watching.userid      = accesses.userid
		AND watching.platform   = accesses.platform
		AND watching.appversion = accesses.appversion
	LEFT OUTER JOIN vod_catalog vod
		ON watching.contentid = vod.contentid
	LEFT OUTER JOIN tvchannels
		ON tvchannels.channel_id = watching.contentid
	GROUP BY
		accesses.userid,
		accesses.appversion,
		accesses.platform,
		channel_name,
		categoryname
	) AS content
GROUP BY
	userid, categoryname, channel_name,
	appversion,
	platform,
	playback_duration,
	accesses;




---
--table structure for VAR_anonymous daily
---
CREATE EXTERNAL TABLE IF NOT EXISTS var_anonymous_1d(
	userid	string,
	appversion	string,
	platform string,

	accesses int,
	views int,
	playback_duration	decimal(15,4),
	live_views	int,
	live_playback_duration	decimal(15,4),
	video_views	int,
	video_playback_duration decimal(15,4),
	top_watched_channel string,
	top_watched_category	string,
	first_view_date	string,
	first_access_date string,
	pageviews bigint,
	new_user INT,
	total_detail_views bigint,
	views_after_details INT,
	accesses_with_views INT,
	accesses_without_views INT,
	unique_views INT,
	movie_trailer_views BIGINT,
	views_after_trailer INT,
	average_playback_duration DECIMAL(38,5)
)
PARTITIONED BY (partition_date string)
LOCATION '${hiveconf:ROOTPATH}/processed/AVA/var_anonymous_1d';


INSERT
INTO TABLE var_anonymous_1d PARTITION
	(
		partition_date = '${hiveconf:ENDDATE}'
	)
SELECT viewership.userid,
	viewership.appversion,
	viewership.platform,

	viewership.accesses,
	viewership.views,
	viewership.playback_duration,
	viewership.live_views,
	viewership.live_playback_duration,
	viewership.video_views,
	viewership.video_playback_duration,
	channel_name AS top_watched_channel,
	categoryname AS top_watched_category,
	w.start_day  AS first_view_date,
	a.access_day AS first_access_date,
	tmp_pw.pageviews,
	CASE
		WHEN a.access_day='${hiveconf:ENDDATE}'
		THEN 1
		ELSE 0
	END AS new_user,
	tmp_vad.total_detail_views,
	tmp_vad.views_after_details,
	tmp_views_anonymous.accesses_with_views,
	tmp_views_anonymous.accesses_without_views,
	tmp_wtch_kpi.unique_views,
	tmp_wtch_kpi.movie_trailer_views,
	tmp_wtch_kpi.views_after_trailer,
	(CASE 
		WHEN viewership.playback_duration IS NULL OR viewership.playback_duration =0
		OR viewership.views IS NULL OR viewership.views =0
		THEN 0
		ELSE viewership.playback_duration/viewership.views 
	END) AS average_playback_duration
FROM
	(SELECT userid,
		appversion,
		platform,
		AVG(accesses)                                          AS accesses,
		SUM(views)                                             AS views,
		SUM(playback_duration)                                 AS playback_duration,
		SUM(IF(channel_name IS NOT NULL, views,0))             AS live_views,             --??
		SUM(IF(channel_name IS NOT NULL, playback_duration,0)) AS live_playback_duration, --??
		SUM(IF(categoryname IS NOT NULL, views,0))             AS video_views,
		SUM(IF(categoryname IS NOT NULL, playback_duration,0)) AS video_playback_duration
		-- SUM(pageviews)                                         AS pageviews
	FROM var_anonymous_base
	WHERE partition_date='${hiveconf:ENDDATE}'
	GROUP BY userid,
		appversion,
		platform
	)viewership
LEFT OUTER JOIN
	(SELECT *
	FROM
		(SELECT userid,
			appversion,
			platform,
			playback_duration,
			collect_set(channel_name)[0]                                                           AS channel_name,
			RANK() OVER (PARTITION BY userid,appversion, platform ORDER BY playback_duration DESC) AS rank_
		FROM var_anonymous_base
		WHERE partition_date = '${hiveconf:ENDDATE}'
		AND channel_name  IS NOT NULL
		GROUP BY userid,
			appversion,
			platform,
			playback_duration
		)rank_channel
	WHERE rank_channel.rank_ = 1
	)top_channel
ON top_channel.userid      = viewership.userid
AND top_channel.appversion = viewership.appversion
AND top_channel.platform   = viewership.platform
LEFT OUTER JOIN
	(SELECT *
	FROM
		(SELECT userid,
			appversion,
			platform,
			playback_duration,
			collect_set(categoryname)[0]                                                           AS categoryname,
			RANK() OVER (PARTITION BY userid,appversion, platform ORDER BY playback_duration DESC) AS rank_
		FROM var_anonymous_base
		WHERE partition_date = '${hiveconf:ENDDATE}'
		AND categoryname    IS NOT NULL
		GROUP BY userid,
			appversion,
			platform,
			playback_duration
		) rank_category
	WHERE rank_category.rank_ = 1
	) top_category
	ON top_category.userid      = viewership.userid
	AND top_category.appversion = viewership.appversion
	AND top_category.platform   = viewership.platform
LEFT OUTER JOIN watching_users_list AS w
	ON w.user_id = viewership.userid
LEFT OUTER JOIN access_users_list AS a
	ON a.user_id = viewership.userid
LEFT OUTER JOIN tmp_views_after_details_anonymous AS tmp_vad -- TMP
	ON	viewership.userid = tmp_vad.userid
	AND	viewership.appversion = tmp_vad.appversion
	AND	viewership.platform = tmp_vad.platform
LEFT OUTER JOIN tmp_view_with_or_without_views_anonymous AS tmp_views_anonymous
	ON	viewership.userid = tmp_views_anonymous.userid
	AND	viewership.appversion = tmp_views_anonymous.appversion
	AND	viewership.platform = tmp_views_anonymous.platform
LEFT OUTER JOIN tmp_watching_kpi_anonymous AS tmp_wtch_kpi
	ON	viewership.userid = tmp_wtch_kpi.userid
	AND	viewership.appversion = tmp_wtch_kpi.appversion
	AND	viewership.platform = tmp_wtch_kpi.platform
LEFT OUTER JOIN tmp_pageviews_guest AS tmp_pw
	ON viewership.userid = tmp_pw.userid;
